continue
response.body
response
continue
dart?
continue
JSON.parse(response.body)['name']
JSON.parse(response.body)
response.body
continue
controller.result_params
Api::V1::ResultsController.ResultParams
Api::V1::ResultsController.result_params
Api::V1::ResultsController
request
request.controller
request.controllet
controller.methods.result_params
controller.methods
controller.method
controller
controller.result_params
result_params
continue
response.body
response
result
continue
JSON.parse(response.body)['competition_id']
JSON.parse(response.body)[:competition_id]
JSON.parse(response.body)[competition_id]
JSON.parse(response.body)
response.body
request.body
response.body
response
request.body
request.message
request
buf
response.content
response.message
response
continue
response
response.message
continue
response.buf
response.errors
response.error
response.content
response.status
response
continue
Competition.all
Athlete.all
continue
Athlete.all
Athlete
request.params
continue
request.params
continue
request.method
request.path
request
request.controller
continue
request.params
request
self
params
continue
competition.results
continue
competition.results
continue
result_1
competition.reload.results
result_1
competition.results
competition
continue
result.errors
result.valid?
continue
competition.can_end_competition?
competition.results.count
competition.results
result.save
competition.results
result
continue
result
continue
result
continue
result
competition.can_end_competition?
competition.results.count
continue
competition.athletes
competition.results.count
competition.results
result
continue
competition.results
result
continue
competition.results
result
continue
competition.results
result
continue
result
continue
competition.results
continue
result
continue
Athlete.find(1)
Athlete.find(2)
result
exit
competition.results
competition
continue
competition.valid?
competition
continue
competition
continue
competition
continue
competiton
competition
continue
a.errors
a = @competition.results.create({ athlete: @athlete}.merge(result_params.except('competition', 'athlete')))
@competition.results.create({ athlete: @athlete}.merge(result_params.except('competition', 'athlete')))
{ athlete: @athlete}.merge(result_params.except('competition', 'athlete'))
result_params.except('competition', 'athlete')
continue
@competition
continue
@competition
continue
@competition.ranking
@competition
continue
competition_params["name"]
competition_params.name
competition_params
exit
i
val
k
exit
unit
exit
unit
val
k
exit
val
k
exit
v
v 
vv
v
k
